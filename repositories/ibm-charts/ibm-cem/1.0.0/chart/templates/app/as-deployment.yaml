{{ if ne .Values.productName "IBM Cloud App Management" }}
{{- $compName := "rba-as" -}}
{{- include "sch.config.init" (list . "cem.sch.chart.config.values") -}}
{{- $deploymentName := include "sch.names.fullCompName" (list . $compName) -}}
{{- $rbaTlsTemplateName := include "sch.names.volumeClaimTemplateName" (list . "config" $deploymentName) -}}
{{- $rootData := fromYaml (include "root.data" .) -}}
{{- $rootMetering := $rootData.metering -}}
apiVersion: apps/v1beta2
kind: Deployment
metadata:
  name: {{ $deploymentName }}
  namespace: {{ .Release.Namespace }}
  labels:
{{ include "sch.metadata.labels.standard" (list . $compName) | indent 4 }}
    origin: helm-cem
spec:
  replicas: {{ .Values.rba.as.clusterSize }}
  selector:
    matchLabels:
      release: {{ .Release.Name }}
      app: {{ include "sch.names.appName" (list .) | quote }}
      component: {{ $compName | quote }}
  template:
    metadata:
      labels:
{{ include "sch.metadata.labels.standard" (list . $compName) | indent 8 }}
        origin: helm-cem
      annotations:
        checksum/cemusers-cred-secret: {{ include (print $.Template.BasePath "/secrets/cemusers-cred-secret.yaml") . | sha256sum }}
{{- include "sch.metadata.annotations.metering" (list . $rootMetering) | indent 8 }}
    spec:
{{ include "ingress-host-alias" . | indent 6 }}
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          #If you specify multiple nodeSelectorTerms associated with nodeAffinity types,
          #then the pod can be scheduled onto a node if one of the nodeSelectorTerms is satisfied.
          #
          #If you specify multiple matchExpressions associated with nodeSelectorTerms,
          #then the pod can be scheduled onto a node only if all matchExpressions can be satisfied.
          #
          #valid operators: In, NotIn, Exists, DoesNotExist, Gt, Lt
            nodeSelectorTerms:
            - matchExpressions:
              - key: beta.kubernetes.io/arch
                operator: In
                values:
                {{- if .Values.arch }}
                  - {{ .Values.arch }}
                {{- else }}
                  - {{ template "arch" . }}
                {{- end }}
      initContainers:
      - name: waitforcouchdb
        image: "{{ .Values.global.image.repository }}/hdm-icp-rba-as:{{ .Values.commonimages.rba.as.image.tag }}"
        command: ["sh", "-c", "i=1;until getent hosts {{ template "releasename" . }}-couchdb.{{ .Release.Namespace }}.svc; do echo waiting for couchdb $i;i=$((i+1)); sleep 2; done;"]
      containers:
      - name: rba-as
        image: "{{ .Values.global.image.repository }}/hdm-icp-rba-as:{{ .Values.commonimages.rba.as.image.tag }}"
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 3080
          protocol: TCP
        livenessProbe:
          tcpSocket:
            port: 3080
          initialDelaySeconds: 240
          periodSeconds: 60
        readinessProbe:
          tcpSocket:
            port: 3080
          initialDelaySeconds: 240
          periodSeconds: 60
        resources:
{{ include "ibmcemprod.comp.size.data" (list . "as" "resources") | indent 10 }}
        env:
        - name: LICENSE
          value: {{ .Values.license | default "not accepted" }}
        - name: RBA_AUTOMATIONSERVICE_EXTERNAL_HOST
          value: {{ include "cem.service.host" (list . "cem.services.rbaas") }}
        - name: RBA_DEVOPS_USER
          valueFrom:
            secretKeyRef:
              name: {{ template "releasename" . }}-rba-devops-secret
              key: username
        - name: RBA_DEVOPS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: {{ template "releasename" . }}-rba-devops-secret
              key: password
        - name: RBA_AS_ENABLE_API_DOCS
          value: 'true'
        - name: RBA_DEPLOYMODE
          value:  'icp-cem'
        - name: RBA_JWT_SECRET
          valueFrom:
            secretKeyRef:
              name: {{ template "releasename" . }}-rba-jwt-secret
              key: secret
        - name: RBA_AUTOMATIONSERVICE_EXTERNAL_PROTOCOL
          value:  {{ include "cem.service.protocol" (list . "cem.services.rbaas") }}
        - name: RBA_AUTOMATIONSERVICE_INTERNAL_PROTOCOL
          value:  http
        - name: RBA_DATABASE_CLUSTER_ENABLED
          value: 'true'
        - name: RBA_DATABASE_CLUSTER_PROTOCOL
          value: {{ include "cem.service.protocol" (list . "cem.services.couchdb") }}
        - name: RBA_DATABASE_CLUSTER_HOST
          value: {{ include "cem.service.host" (list . "cem.services.couchdb") }}
        - name: RBA_DATABASE_CLUSTER_PORT
          value: {{ include "cem.service.port" (list . "cem.services.couchdb") | quote }}
        - name: RBA_DATABASE_CLUSTER_DBNAMEPREFIX
          value: icp
        - name: RBA_DATABASE_CLUSTER_USER
          valueFrom:
            secretKeyRef:
              name: {{ template "releasename" . }}-{{ .Values.couchdb.secretName }}
              key: username
        - name: RBA_DATABASE_CLUSTER_PASSWORD
          valueFrom:
            secretKeyRef:
              name: {{ template "releasename" . }}-{{ .Values.couchdb.secretName }}
              key: password
        - name: INGRESS_PREFIX
          value: '{{ .Values.global.ingress.prefix }}'
        - name: INGRESS_DOMAIN
          value: '{{ .Values.global.ingress.domain | default .Values.global.proxyIP }}'
      restartPolicy: Always
{{ end }}
