{{- if .Values.cleanUpOldCA }}
apiVersion: batch/v1
kind: Job
metadata:
  name: istio-cleanup-old-ca
  namespace: {{ .Release.Namespace }}
  labels:
    app: {{ template "security.name" . }}
    chart: {{ template "security.chart" . }}
    heritage: {{ .Release.Service }}
    release: {{ .Release.Name }}
  annotations:
    "helm.sh/hook": post-install
    "helm.sh/hook-delete-policy": hook-succeeded
spec:
  template:
    metadata:
      name:  istio-cleanup-old-ca
      labels:
        app: {{ template "security.name" . }}
        chart: {{ template "security.chart" . }}
        heritage: {{ .Release.Service }}
        release: {{ .Release.Name }}
      annotations:
        sidecar.istio.io/inject: "false"
        scheduler.alpha.kubernetes.io/critical-pod: ""
    spec:
      serviceAccountName: istio-cleanup-old-ca-service-account
{{- if .Values.global.priorityClassName }}
      priorityClassName: "{{ .Values.global.priorityClassName }}"
{{- end }}
      containers:
        - name: kubectl
          image: "{{ .Values.global.kubectl.repository }}:{{ .Values.global.kubectl.tag }}"
          imagePullPolicy: "{{ .Values.global.imagePullPolicy }}"
          command:
          - /bin/sh
          - -c
          - >
              NS="-n {{ .Release.Namespace }}";
              kubectl get deploy istio-ca $NS;
              if [[ $? = 0 ]]; then kubectl delete deploy istio-ca $NS; fi;
              kubectl get serviceaccount istio-ca-service-account $NS;
              if [[ $? = 0 ]]; then kubectl delete serviceaccount istio-ca-service-account $NS; fi;
              kubectl get service istio-ca-ilb $NS;
              if [[ $? = 0 ]]; then kubectl delete service istio-ca-ilb $NS; fi
      restartPolicy: Never
      nodeSelector:
      {{- include "nodeselector" . | indent 6 }}
      tolerations:
      {{- include "tolerations" . | indent 6 }}
      affinity:
      {{- include "nodeaffinity" . | indent 6 }}
{{- end }}