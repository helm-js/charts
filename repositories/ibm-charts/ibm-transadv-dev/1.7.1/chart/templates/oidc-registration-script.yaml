#*******************************************************************************
# Licensed Materials - Property of IBM
# "Restricted Materials of IBM"
#
# Copyright IBM Corp. 2018 All Rights Reserved
#
# US Government Users Restricted Rights - Use, duplication or disclosure
# restricted by GSA ADP Schedule Contract with IBM Corp.
#*******************************************************************************

#
# @Author Huang, Fuguo (a.k.a Ken) at 25.May.2018
#
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ template "fullname" . }}-{{ .Chart.Version | replace "." "" }}-odic-registration-script
  namespace: "services"
  labels:
    app: {{ template "fullname" . }}-{{ .Chart.Version | replace "." "" }}-odic-registration
    chart: {{ .Chart.Name }}-{{ .Chart.Version | replace "+" "_" }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
data:
  register-client.sh: |
    #!/bin/bash

    user_input_icp_auth_endpoint_port={{ .Values.authentication.icp.endpointPort }} # 8443
    user_input_oidc_auth_endpoint_port={{ .Values.authentication.oidc.endpointPort }} # 9443
    user_input_client_id={{ .Values.authentication.oidc.clientId }}
    user_input_client_secret={{ .Values.authentication.oidc.clientSecret }}

    if [ -z "${user_input_icp_auth_endpoint_port// }" ] || [ -z "${user_input_oidc_auth_endpoint_port// }" ] || [ -z "${user_input_client_id// }" ] || [ -z "${user_input_client_secret// }" ]
    then
      # at least one empty
      echo "At least one required value is empty. OIDC will not be registered."
      exit 0
    fi

    enable_auth={{ .Values.ingress.enabled }}

    if [ $enable_auth = "false" ]
    then
      # Authentication is off
      echo "Authentication is OFF. OIDC will not be registered."
      exit 0
    fi

    # /jsons in ICP 2.1.0.3 is read only mount volumn
    mkdir -p /opt/oidc
    cp /jsons/oidc-registration.json /opt/oidc/oidc-registration.json

    sed -i 's/___ICP_PROXY_IP___/'${ICP_PROXY_IP}'/g' /opt/oidc/oidc-registration.json
    sed -i 's/___ICP_MASTER_IP___/'${ICP_MASTER_IP}'/g' /opt/oidc/oidc-registration.json

    HTTP_CODE=""
    while true
    do
      HTTP_CODE=`curl -k -o /dev/null -I  -w "%{http_code}" -X GET -u oauthadmin:$WLP_CLIENT_REGISTRATION_SECRET \
       -H "Content-Type: application/json" \
       https://$ICP_MASTER_IP:{{ .Values.authentication.oidc.endpointPort }}/oidc/endpoint/OP/registration/{{ .Values.authentication.oidc.clientId }}`
      if [ $HTTP_CODE = "404" -o $HTTP_CODE = "200" ] ; then
         break;
      fi
      sleep 2s
    done

    if [ $HTTP_CODE = "404" ]
    then
      echo "Creating new client registration."

      until curl -i -k -X POST -u oauthadmin:$WLP_CLIENT_REGISTRATION_SECRET \
       -H "Content-Type: application/json" \
       --data @/opt/oidc/oidc-registration.json \
       https://$ICP_MASTER_IP:{{ .Values.authentication.oidc.endpointPort }}/oidc/endpoint/OP/registration | grep '201 Created'; do sleep 1; done;

      echo "Client is registered."
    else
      echo "Replacing current client registration."
      retry=1
      max_retry=20
      while [ $retry -le $max_retry ]
      do
        HTTP_CODE=`curl -k -o /dev/null -w "%{http_code}" -X PUT -u oauthadmin:$WLP_CLIENT_REGISTRATION_SECRET \
         -H "Content-Type: application/json" \
         --data @/opt/oidc/oidc-registration.json \
         https://$ICP_MASTER_IP:{{ .Values.authentication.oidc.endpointPort }}/oidc/endpoint/OP/registration/{{ .Values.authentication.oidc.clientId }}`
        if [ $HTTP_CODE = "200" ]
        then
          echo "Replaced the client registration."
          break;
        fi
        retry=$(($retry + 1))
        sleep 2s
      done
      if [ $retry -ge $max_retry ]
      then
        echo "Failed to Replacing current registration. Authentication registration failed."
        exit 1
      fi
    fi

