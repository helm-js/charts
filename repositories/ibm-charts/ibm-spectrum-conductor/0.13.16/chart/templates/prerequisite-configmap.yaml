apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ .Release.Name }}-prerequisite
  labels:
    heritage: {{.Release.Service | quote }}
    release: {{.Release.Name | quote }}
    chart: "{{.Chart.Name}}"
    app: {{ template "master-fullname" . }}
data:
  etcd-Chart: |-
    name: conductor-etcd
    version: {{.Chart.Version}}
    description: etcd for CwS
    home: https://www.ibm.com/support/knowledgecenter/SSZU2E/product_welcome_conductorspark.html
    icon: https://www.ibm.com/developerworks/community/groups/service/html/image?communityUuid=281605c9-7369-46dc-ad03-70d9ad377480&lastMod=1464891144123&showDefaultForNoPermissions=true
    sources:
    - http://192.168.0.1/TBD  
    keywords:
    - etcd
    maintainers:
    - email: liuhoug@cn.ibm.com
      name: HouGang Liu
  etcd-template: |-
    apiVersion: v1
    kind: PersistentVolumeClaim
    metadata:
      name: "conductor-etcd-data"
      namespace: {{template "etcdServiceNamespace" . }}
      labels:
        heritage: {{.Release.Service | quote }}
        release: {{.Release.Name | quote }}
        chart: "{{.Chart.Name}}"
        app: conductor-etcd-data
    spec:
      {{- if .Values.cluster.etcdSharedStorageClassName }}
      storageClassName: {{ .Values.cluster.etcdSharedStorageClassName }}
      {{- end }}
      accessModes:
        - ReadWriteMany
      resources:
        requests:
          storage: 2Gi
    ---
    apiVersion: extensions/v1beta1
    kind: Deployment
    metadata:
      name: {{template "etcdService" . }}
      namespace: {{template "etcdServiceNamespace" .}}
      labels:
         heritage: {{.Release.Service | quote }}
         release: {{.Release.Name | quote }}
         chart: "{{.Chart.Name}}"
         app: {{template "etcdService" .}}
    spec:
      replicas: 1
      selector:
        matchLabels:
          heritage: {{.Release.Service | quote }}
          release: {{.Release.Name | quote }}
          chart: "{{.Chart.Name}}"
          app: {{template "etcdService" . }}
      template:
        metadata:
          labels:
            heritage: {{.Release.Service | quote }}
            release: {{.Release.Name | quote }}
            chart: "{{.Chart.Name}}"
            app: {{template "etcdService" .}}
        spec:
          volumes:
            - name: data
              persistentVolumeClaim:
                  claimName: conductor-etcd-data
          containers:
            - image: {{ template "etcdImage" . }}
              imagePullPolicy: IfNotPresent
              name: etcd
              ports:
                - containerPort: {{template "etcdServicePort" .}}
                  name: client
                  protocol: TCP
              command:
              - /usr/local/bin/etcd
              - --name
              - {{template "etcdService" .}}
              - --data-dir
              - /var/lib/etcd
              - --initial-advertise-peer-urls
              - http://0.0.0.0:2380
              - --listen-peer-urls
              - http://0.0.0.0:2380
              - --listen-client-urls
              - http://0.0.0.0:2379
              - --advertise-client-urls
              - http://0.0.0.0:2379
              volumeMounts:
              - name: data
                mountPath: /var/lib/etcd
    ---
    apiVersion: v1
    kind: Service
    metadata:
      labels:
        heritage: {{.Release.Service | quote }}
        release: {{.Release.Name | quote }}
        chart: "{{.Chart.Name}}"
        app: {{template "etcdService" . }}
      name: {{template "etcdService" . }}
      namespace: {{template "etcdServiceNamespace" . }}
    spec:
      ports:
      - name: client
        port: {{template "etcdServicePort" . }}
        protocol: TCP
        targetPort: {{template "etcdServicePort" .}}
      selector:
        heritage: {{.Release.Service | quote }}
        release: {{.Release.Name | quote }}
        chart: "{{.Chart.Name}}"
        app: {{template "etcdService" . }}
{{- if eq .Values.cluster.proxyOption "HttpProxy" }}
  cws-proxy-Chart: |-
    name: conductor-proxy
    version: {{.Chart.Version}}
    description: Proxy for Conductor with Spark
    home: https://www.ibm.com/support/knowledgecenter/SSZU2E/product_welcome_conductorspark.html
    icon: https://www.ibm.com/developerworks/community/groups/service/html/image?communityUuid=281605c9-7369-46dc-ad03-70d9ad377480&lastMod=1464891144123&showDefaultForNoPermissions=true
    sources:
    - http://192.168.0.1/TBD  
    keywords:
    - conductor-spark-proxy
    maintainers:
    - email: hma@ca.ibm.com
      name: Haohai Ma
  cws-proxy-template: |-
    apiVersion: v1
    kind: ConfigMap
    metadata:
      name: conductor-proxy-bootstrap 
      namespace: default
      labels:
        heritage: {{.Release.Service | quote }}
        release: {{.Release.Name | quote }}
        chart: "{{.Chart.Name}}"
        app: conductor-proxy-bootstrap
    data:
      appendEtcHost.sh: |- 
          set -x
          sh /var/tmp/cfc/appendEtcHostfromShare.sh & 
          #polipo proxyAddress=0.0.0.0 dnsUseGethostbyname=true
          privoxy --no-daemon --user privoxy /etc/privoxy/config
      appendEtcHostfromShare.sh: |- 
          set -x
          curl --silent -X PUT {{ template "etcdHostDir" .}} -d dir=true
          cp /etc/hosts /hosts.original
          while [ true ] 
          do
            sleep 10
            curl --silent {{ template "etcdHostDir" .}} | python -c 'import json,sys;obj=json.load(sys.stdin); print "\n".join([":".join([x["value"], x["key"]]) for x in obj["node"]["nodes"]])' | sed "s/\/cwsnodemap\///" > /hostlist.yaml
            if [ -f /hosts.tmp ]; then
                rm -f /hosts.tmp
            fi
            cat /hosts.original >> /hosts.tmp
            while read -r line
            do
              ip=$(echo $line | cut -f 1 -d':' | xargs)
              host=$(echo $line | cut -f 2 -d':' | xargs)
              if [ ! -z "$host" ]; then 
                ifit=$(grep "$ip  ${host}$" /hosts.tmp)
                if [ -z "$ifit" ]; then
                   #sed -i does not work in containers
                   #sed -i "/${host}/d" /etc/hosts 
                   echo "get new host line - $line"
                   echo "$ip  $host"  >> /hosts.tmp
                fi
              fi
            done < /hostlist.yaml
            cat /hosts.tmp > /etc/hosts
          done   
    ---
    apiVersion: v1
    kind: Secret
    metadata:
      name: uiregistrykey-{{ .Release.Name }}
      namespace: default
      labels:
        heritage: {{.Release.Service | quote }}
        release: {{.Release.Name | quote }}
        chart: "{{.Chart.Name}}"
        app: {{template "cwsProxyService" . }}
    data:
      .dockerconfigjson: {{ template "cwsImagePullSecret" . }}
    type: kubernetes.io/dockerconfigjson
    ---
    apiVersion: v1
    kind: Service
    metadata:
      name: {{template "cwsProxyService" . }}
      namespace: default
      labels:
        heritage: {{.Release.Service | quote }}
        release: {{.Release.Name | quote }}
        chart: "{{.Chart.Name}}"
        app: {{template "cwsProxyService" . }}
    spec:
      ports:
        - port: 8118
          targetPort: 8118
          nodePort: 30123
      selector:
        heritage: {{.Release.Service | quote }}
        release: {{.Release.Name | quote }}
        chart: "{{.Chart.Name}}"
        app: {{template "cwsProxyService" . }}
      type: "LoadBalancer"
    ---
    apiVersion: extensions/v1beta1
    kind: Deployment
    metadata:
      name: {{template "cwsProxyService" . }}
      namespace: default
      labels:
        heritage: {{.Release.Service | quote }}
        release: {{.Release.Name | quote }}
        chart: "{{.Chart.Name}}"
        app: {{template "cwsProxyService" . }}
    spec:
      replicas: 1
      selector:
        matchLabels:
          app: {{template "cwsProxyService" . }}
          heritage: {{.Release.Service | quote }}
          release: {{.Release.Name | quote }}
          chart: "{{.Chart.Name}}"
      template:
        metadata:
          labels:
            heritage: {{.Release.Service | quote }}
            release: {{.Release.Name | quote }}
            chart: "{{.Chart.Name}}"
            app: {{template "cwsProxyService" . }}
        spec:
          imagePullSecrets:
            - name: uiregistrykey-{{ .Release.Name }}
          containers:
            - name: {{template "cwsProxyService" . }}
              image: {{template "cwsProxyImage" .}}
              imagePullPolicy: IfNotPresent
              ports:
                - containerPort: 8118
              resources:
                requests:
                  cpu: 200m
              command: ["/bin/sh","-c"]
              args: ["$(sh /var/tmp/cfc/appendEtcHost.sh)"]
              #livenessProbe:
              #    httpGet:
              #      path: /
              #      port: 80
              #    initialDelaySeconds: 120
              #    timeoutSeconds: 5
              volumeMounts:
                - mountPath: /var/tmp/cfc
                  name: conductor-proxy-bootstrap
          volumes:
            - name: conductor-proxy-bootstrap
              configMap:
                name: "conductor-proxy-bootstrap"
{{- end }}
