###############################################################################
# Copyright (c) 2017 IBM Corp.
# 
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# 
#     http://www.apache.org/licenses/LICENSE-2.0
# 
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
###############################################################################
{{- $stateful := or .Values.logs.persistTransactionLogs .Values.logs.persistLogs -}}
{{ if $stateful }}
apiVersion: apps/v1beta1
kind: StatefulSet
{{ else }}
apiVersion: extensions/v1beta1
kind: Deployment
{{ end }}
metadata:
  name: {{ template "fullname" . }}
  labels:
    chart: "{{ .Chart.Name }}-{{ .Chart.Version }}"
    app: {{ template "fullname" . }}
    release: "{{ .Release.Name }}"
    heritage: "{{ .Release.Service }}"    
spec:
  {{ if $stateful }}
  serviceName: {{ template "fullname" . }}
  {{ end }}
  {{ if not .Values.autoscaling.enabled -}}
  replicas: {{ .Values.replicaCount }}
  {{- end }}
  selector:
    matchLabels:
      app: {{ template "fullname" . }}
  template:
    metadata:
      labels:
        app: {{ template "fullname" . }}
    spec:
      {{ if and .Values.ssl.enabled .Values.ssl.useClusterSSLConfiguration }}
      volumes:  
        - name: keystores
          secret:
            secretName: mb-keystore
        - name: truststores
          secret:
            secretName: mb-truststore
        - name: ssl-config
          configMap:
            name: liberty-config
      {{ end }}
      containers:
      - name: {{ .Chart.Name }}
        readinessProbe:
          httpGet:
          {{ if .Values.microprofile.health.enabled }}
            path: /health
          {{ else }}
            path: /
          {{ end }}
            port: {{ .Values.service.targetPort }}
            {{ if .Values.ssl.enabled}}
            scheme: HTTPS
            {{ end }}
        image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
        imagePullPolicy: {{ .Values.image.pullPolicy }}
        env:
        - name: JVM_ARGS
          value: {{ .Values.env.jvmArgs | quote }}
        - name: WLP_LOGGING_CONSOLE_FORMAT
          value: {{ .Values.logs.consoleFormat }}
        - name: WLP_LOGGING_CONSOLE_LOGLEVEL
          value: {{ .Values.logs.consoleLogLevel }}
        - name : WLP_LOGGING_CONSOLE_SOURCE
          value: {{ .Values.logs.consoleSource }}
        {{ if and .Values.ssl.enabled (not .Values.ssl.useClusterSSLConfiguration) }}
        - name : KEYSTORE_REQUIRED
          value: "true"
        {{ end }}
        {{ if and .Values.ssl.enabled .Values.ssl.useClusterSSLConfiguration -}}
        - name: MB_KEYSTORE_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mb-keystore-password
              key: password
        - name: MB_TRUSTSTORE_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mb-truststore-password
              key: password
        {{- end }}
        {{ if or $stateful (and .Values.ssl.enabled .Values.ssl.useClusterSSLConfiguration) }}
        volumeMounts:
        {{ if and .Values.ssl.enabled .Values.ssl.useClusterSSLConfiguration -}}
        - name: keystores
          mountPath: /etc/wlp/config/keystore
          readOnly: true
        - name: truststores
          mountPath: /etc/wlp/config/truststore
          readOnly: true
        - name: ssl-config
          mountPath: /config/configDropins/defaults/keystore.xml
          subPath: keystore.xml
          readOnly: true
        {{ end }}
        {{ if .Values.logs.persistTransactionLogs }}
        - mountPath: /output/tranlog
          name: {{ .Values.persistence.name | trunc 63 | lower | trimSuffix "-" | quote }}
          subPath: tranlog
        {{ end }}
        {{ if .Values.logs.persistLogs }}
        - mountPath: /logs
          name: {{ .Values.persistence.name | trunc 63 | lower | trimSuffix "-" | quote }}
          subPath: logs
        {{ end }}
        {{ end }}
        resources:
          {{- if .Values.resources.constraints.enabled}}      
          limits:
{{ toYaml .Values.resources.limits | indent 12 }}
          requests:
{{ toYaml .Values.resources.requests | indent 12 }}
          {{- end }}
        securityContext:
          privileged:  false
      restartPolicy: "Always"
      terminationGracePeriodSeconds: 30
      dnsPolicy: "ClusterFirst"
  {{ if $stateful -}}
  volumeClaimTemplates:
  - metadata:
      name: {{ .Values.persistence.name | trunc 63 | lower | trimSuffix "-"  | quote }}
    spec:
      {{- if .Values.persistence.useDynamicProvisioning }}
      # if present, use the storageClassName from the values.yaml, else use the
      # default storageClass setup by kube Administrator
      # setting storageClassName to nil means use the default storage class
      storageClassName: {{ default nil .Values.persistence.storageClassName | quote }}
      {{- else }}
      # bind to an existing pv.
      # setting storageClassName to "" disables dynamic provisioning
      storageClassName: {{ default "" .Values.persistence.storageClassName | quote }}
      {{- if .Values.persistence.selector.label }}
      # use selectors in the binding process
      selector:
        matchExpressions:
          - {key: {{ .Values.persistence.selector.label }}, operator: In, values: [{{ .Values.persistence.selector.value }}]}
      {{- end }}
      {{- end }}
      accessModes: ["ReadWriteOnce"]
      resources:
        requests:
          storage: {{ .Values.persistence.size | quote }}
  {{- end }}
