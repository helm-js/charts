apiVersion: apps/v1beta1
kind: StatefulSet
metadata:
  name: "{{ template "data.fullname" . }}"
  labels:
    app: "{{ template "name" . }}"
    chart: "{{ .Chart.Name }}-{{ .Chart.Version }}"
    component: "data"
    release: "{{ .Release.Name }}"
    heritage: "{{ .Release.Service }}"
spec:
  serviceName: "{{ template "data.fullname" . }}"
  replicas: {{ .Values.data.replicas }}
  template:
    metadata:
      labels:
        app: "{{ template "name" . }}"
        component: "data"
        release: "{{ .Release.Name }}"
    spec:
      serviceAccountName: "{{ .Values.serviceAccountName }}"
      {{- if eq .Values.data.antiAffinity "hard" }}
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            - topologyKey: "kubernetes.io/hostname"
              labelSelector:
                matchLabels:
                  app: "{{ template "name" . }}"
                  component: "data"
                  release: "{{ .Release.Name }}"
      {{- else if eq .Values.data.antiAffinity "soft" }}
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 1
            podAffinityTerm:
              topologyKey: kubernetes.io/hostname
              labelSelector:
                matchLabels:
                  app: "{{ template "name" . }}"
                  component: "data"
                  release: "{{ .Release.Name }}"
      {{- end }}
      initContainers:
      - name: sysctl
        image: "{{ .Values.image.name }}:{{ .Values.image.tag }}"
        imagePullPolicy: "{{ .Values.image.pullPolicy }}"
        command: ["sysctl", "-w", "vm.max_map_count=262144"]
        securityContext:
          privileged: true
      containers:
      - name: "elasticsearch"
        image: "{{ .Values.image.name }}:{{ .Values.image.tag }}"
        imagePullPolicy: "{{ .Values.image.pullPolicy }}"
        env:
        - name: SERVICE
          value: "{{ template "master.fullname" . }}"
        - name: KUBERNETES_NAMESPACE
          value: "{{ .Release.Namespace }}"
        - name: NODE_MASTER
          value: "false"
        - name: NODE_DATA
          value: "true"
        - name: ELASTICSEARCH_CLUSTER_NAME
          value: "{{ .Values.name }}"
        - name: ELASTICSEARCH_PLUGINS
          value: "{{ .Values.plugins }}"
        - name: ES_JAVA_OPTS
          value: "-Xms{{ .Values.data.heapSize }} -Xmx{{ .Values.data.heapSize }}"
        ports:
        - name: transport
          containerPort: 9300
        livenessProbe:
          httpGet:
            path: /_cluster/health?local=true
            port: 9200
          initialDelaySeconds: 90
        readinessProbe:
          httpGet:
            path: /_cluster/health?local=true
            port: 9200
          initialDelaySeconds: 5
        resources:
{{ toYaml .Values.data.resources | indent 10 }}
        volumeMounts:
        - mountPath: /bitnami/elasticsearch/conf/elasticsearch_custom.yml
          name: "config"
          subPath: elasticsearch_custom.yml
        - name: "data"
          mountPath: "/bitnami"
      volumes:
      - name: "config"
        configMap:
          name: "{{ template "fullname" . }}"
{{- if .Values.data.persistence.enabled }}
  volumeClaimTemplates:
  - metadata:
      name: "data"
{{- if .Values.data.persistence.annotations }}
      annotations:
{{ toYaml .Values.data.persistence.annotations | indent 6 }}
{{- end }}
    spec:
      accessModes:
{{ toYaml .Values.data.persistence.accessModes | indent 6 }}
{{- if .Values.data.persistence.storageClass }}
{{- if (eq "-" .Values.data.persistence.storageClass) }}
      storageClassName: ""
{{- else }}
      storageClassName: "{{ .Values.data.persistence.storageClass }}"
{{- end }}
{{- end }}
      resources:
        requests:
          storage: "{{ .Values.data.persistence.size }}"
{{- else }}
      - name: "data"
        emptyDir: {}
{{- end }}
