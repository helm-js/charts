##########################################
# THIS IS ALPHA QUALITY SOFTWARE         #
# DO NOT RELY ON THIS CHART FOR ANYTHING #
# YOU HAVE BEEN WARNED                   #
##########################################
{{- if eq "manual" .Values.tls.ca.managementMode }}

### TLS ##################################
Remember to create the secret "{{ include "mongodb.fullname" . }}-tls-ca"

To generate quickly
  openssl genrsa -out ca.key 4096
  openssl req -batch -new -x509 -sha512 -days 3650 -key ca.key -out ca.crt -extensions v3_ca -subj '/CN=MongoDB Cluster CA/O=MongoDB - {{ .Release.Name }}/'
  kubectl --namespace {{ .Release.Namespace }} create secret tls {{ include "mongodb.fullname" . }}-tls-ca --cert=ca.crt --key=ca.key
  rm ca.crt ca.key
{{- end }}

### Config replica set initialization
kubectl exec -it {{ include "mongodb.fullname" . }}-configsvr-0 -- mongo --port 27019 --eval 'rs.initiate({{ include "mongodb.configrs" . | nospace }})'

### Config replica set document
{{ include "mongodb.configrs" . | nospace }}

{{- range $i, $e := until (int .Values.topology.shards.count) }}

### Shard {{ $i }} replica set initialization
kubectl exec -it {{ include "mongodb.fullname" $ }}-shard-{{ $i }}-shardsvr-0 -- mongo --port 27018 --eval 'rs.initiate({{ include "mongodb.shardrs" $ | replace "${SHARD_INDEX}" (toString $i) | nospace }})'

### Shard {{ $i }} replica set document
{{ include "mongodb.shardrs" $ | replace "${SHARD_INDEX}" (toString $i) | nospace }}

### Shard {{ $i }} add command
kubectl -n {{ $.Release.Namespace }} exec $(kubectl -n {{ $.Release.Namespace }} get pod -l 'app.kubernetes.io/name={{ include "mongodb.name" $ }},app.kubernetes.io/instance={{ $.Release.Name }},app.kubernetes.io/component=router' -o jsonpath='{.items[0].metadata.name}') \
  -- \
mongo --port 27017 --eval '{{ include "mongodb.shardadd" $ | replace "${SHARD_INDEX}" (toString $i) | nospace }}'

### Shard {{ $i }} add command
{{ include "mongodb.shardadd" $ | replace "${SHARD_INDEX}" (toString $i) | nospace }}
{{- end }}

### Create user command
kubectl -n {{ $.Release.Namespace }} exec $(kubectl -n {{ $.Release.Namespace }} get pod -l 'app.kubernetes.io/name={{ include "mongodb.name" $ }},app.kubernetes.io/instance={{ $.Release.Name }},app.kubernetes.io/component=router' -o jsonpath='{.items[0].metadata.name}') \
  -- \
mongo --port 27017 --eval 'db.getSiblingDB("$external").runCommand({{ include "mongodb.createuser" . | nospace }})'

### Generate client
export SUBJECT="/CN=${USER_NAME}/OU=Users/O=MongoDB-{{ .Release.Name }}/"
openssl genrsa 4096 > client.key
openssl req -batch -new -key client.key -subj "${SUBJECT}" -out client.csr
kubectl -n {{ .Release.Namespace }} get secret {{ include "mongodb.fullname" . }}-tls-ca -o jsonpath='{.data.tls\.crt}' | base64 -d > ca.crt
kubectl -n {{ .Release.Namespace }} get secret {{ include "mongodb.fullname" . }}-tls-ca -o jsonpath='{.data.tls\.key}' | base64 -d > ca.key
openssl x509 -req -in client.csr -CA ca.crt -CAkey ca.key -CAcreateserial -days 3650 -sha512 -out client.crt

openssl x509 -in client.crt -text -noout

### Port-forward

kubectl -n {{ .Release.Namespace }} port-forward $(kubectl -n {{ .Release.Namespace }} get pod -l 'app.kubernetes.io/name={{ include "mongodb.name" . }},app.kubernetes.io/instance={{ .Release.Name }},app.kubernetes.io/component=router' -o jsonpath='{.items[0].metadata.name}') 27017
