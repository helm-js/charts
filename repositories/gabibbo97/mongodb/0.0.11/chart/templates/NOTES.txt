##########################################
# THIS IS ALPHA QUALITY SOFTWARE         #
# DO NOT RELY ON THIS CHART FOR ANYTHING #
# YOU HAVE BEEN WARNED                   #
##########################################
{{- if eq "manual" .Values.tls.ca.managementMode }}

### TLS ##################################
Remember to create the secret "{{ include "mongodb.fullname" . }}-tls-ca"

To generate quickly
  openssl genrsa -out ca.key 4096
  openssl req -batch -new -x509 -sha512 -days 3650 -key ca.key -out ca.crt -extensions v3_ca -subj '/CN=MongoDB Cluster CA/O=MongoDB-{{ .Release.Name }}/'
  kubectl --namespace {{ .Release.Namespace }} create secret tls {{ include "mongodb.fullname" . }}-tls-ca --cert=ca.crt --key=ca.key
  rm ca.crt ca.key
{{- end }}

### Generate client
export USER_NAME="MongoUser"
openssl genrsa 4096 > client.key
openssl req -batch -new -key client.key -subj "/CN=${USER_NAME}/OU=Users/O=MongoDB-{{ .Release.Name }}/" -out client.csr
kubectl -n {{ .Release.Namespace }} get secret {{ include "mongodb.fullname" . }}-tls-ca -o jsonpath='{.data.tls\.crt}' | base64 -d > ca.crt
kubectl -n {{ .Release.Namespace }} get secret {{ include "mongodb.fullname" . }}-tls-ca -o jsonpath='{.data.tls\.key}' | base64 -d > ca.key
openssl x509 -req -in client.csr -CA ca.crt -CAkey ca.key -CAcreateserial -days 3650 -sha512 -out client.crt
cat client.key client.crt > client.pem
rm -f client.csr client.crt client.key

openssl x509 -in client.crt -text -noout

### User management
The only user available is `O=MongoDB-{{ .Release.Name }},OU=Users,CN=HelmClusterRootUser`

Add more by:
  1) Creating the user certificate
  2) Getting its name with `openssl x509 -in <pathToClientPEM> -inform PEM -subject -nameopt RFC2253`
  3) Running `db.getSiblingDB("$external").runCommand({createUser:"<NAME>",roles:[{role:"<role>", db:"<db>"}]})`

### Shard management
################################################################
# BY DEFAULT NO SHARDS ARE CONFIGURED, PLEASE ADD AT LEAST ONE #
################################################################
== ADD A NEW SHARD
{{ range $i, $e := until (int .Values.topology.shards.count) }}
  sh.addShard("Shard{{ $i }}RS/{{ include "mongodb.fullname" $ }}-shard-{{ $i }}-shardsvr-0:27018")
{{ end }}

### Port-forward

kubectl -n {{ .Release.Namespace }} port-forward $(kubectl -n {{ .Release.Namespace }} get pod -l 'app.kubernetes.io/name={{ include "mongodb.name" . }},app.kubernetes.io/instance={{ .Release.Name }},app.kubernetes.io/component=router' -o jsonpath='{.items[0].metadata.name}') 27017

{{ if .Release.IsInstall }}
####################################################
# THE CLUSTER IS BEING INITIALIZED                 #
# WAIT FOR ALL INITIALIZATION SCRIPTS TO TERMINATE #
# THEN UPGRADE MANUALLY THE RELEASE                #
####################################################
{{ end }}
