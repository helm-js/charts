apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: {{ template "postgresql.fullname" . }}
  labels:
    app: {{ template "postgresql.fullname" . }}
    chart: "{{ .Chart.Name }}-{{ .Chart.Version }}"
    release: "{{ .Release.Name }}"
    heritage: "{{ .Release.Service }}"
  annotations:
    kanister.kasten.io/blueprint: {{ template "postgresql.fullname" . }}-blueprint
spec:
  template:
    metadata:
      labels:
        app: {{ template "postgresql.fullname" . }}
    spec:
      {{- if .Values.affinity }}
      affinity:
{{ toYaml .Values.affinity | indent 8 }}
      {{- end }}
      {{- if .Values.nodeSelector }}
      nodeSelector:
{{ toYaml .Values.nodeSelector | indent 8 }}
      {{- end }}
      {{- if .Values.tolerations }}
      tolerations:
{{ toYaml .Values.tolerations | indent 8 }}
      {{- end }}
      {{- if .Values.schedulerName }}
      schedulerName: "{{ .Values.schedulerName }}"
      {{- end }}
      initContainers:
        - name: kanister-restore-backup
          image: "{{ .Values.image }}:{{ .Values.imageTag }}"
          imagePullPolicy: {{ default "" .Values.imagePullPolicy | quote }}
          command:
          - bash
          - -o
          - errexit
          - -o
          - pipefail
          - -o
          - xtrace
          - -c
          - |
            # TODO: Abstract use of init container here as a Kanister-level
            # function that coordinates manipulating data files used by the
            # Postgres container.
            if [[ -d ${PGDATA}/kanister-restore ]]
            then
                # Recovery in progress. Finalizing replacing files
                # Replace files from the relevant full backup
                #
                # TODO: Currently .conf files unchanged. Include in backup in future
                ls -d ${PGDATA}/kanister-restore/* | sed 's/kanister-restore\///' | xargs -t rm -fr
                mv ${PGDATA}/kanister-restore/* ${PGDATA}/.
                rm -fr ${PGDATA}/kanister-restore
                chown postgres:postgres -R ${PGDATA}/*
                # Complete the recovery based on recovery.conf
                # Currently applies all available logs until done, first error, or timeout
                # Don't want to hit timeout so make really long. Currently 10hrs
                cat ${PGDATA}/recovery.conf
                PG_CTL="$(which pg_ctl)"
                su - postgres --preserve-environment -c "${PG_CTL} -D ${PGDATA} -w start -t 36000"
                # Should have recovered to recovery.conf settings. Current version instructs
                # postgress to shutdown when recovery is complete
            fi
          env:
          - name: POSTGRES_USER
            value: {{ default "postgres" .Values.postgresUser | quote }}
          - name: PGUSER
            value: {{ default "postgres" .Values.postgresUser | quote }}
          - name: PGDATA
            value: /var/lib/postgresql/data/pgdata
          - name: POSTGRES_PASSWORD
            valueFrom:
              secretKeyRef:
                name: {{ template "postgresql.fullname" . }}
                key: postgres-password
          - name: AWS_ACCESS_KEY_ID
            valueFrom:
              secretKeyRef:
                name: {{ template "postgresql.fullname" . }}-backup-creds
                key: s3_access_key_id
          - name: AWS_SECRET_ACCESS_KEY
            valueFrom:
              secretKeyRef:
                name: {{ template "postgresql.fullname" . }}-backup-creds
                key: s3_secret_access_key
          - name: WALE_S3_PREFIX
            valueFrom:
              configMapKeyRef:
                name: {{ template "postgresql.fullname" . }}-backup-config
                key: s3_bucket
          {{- if .Values.kanister.s3_endpoint }}
          - name: WALE_S3_ENDPOINT
            valueFrom:
              configMapKeyRef:
                name: {{ template "postgresql.fullname" . }}-backup-config
                key: s3_endpoint
          {{- else }}
          - name: AWS_REGION
            value: {{ default "us-east-1" .Values.kanister.s3_region | quote }}
          {{- end }}
          volumeMounts:
          - name: data
            mountPath: {{ .Values.persistence.mountPath }}
            subPath: {{ .Values.persistence.subPath }}
      containers:
      - name: postgresql
        image: "{{ .Values.image }}:{{ .Values.imageTag }}"
        imagePullPolicy: {{ default "" .Values.imagePullPolicy | quote }}
        args:
          {{- range $key, $value := default dict .Values.postgresConfig }}
          - -c
          - '{{ $key | snakecase }}={{ $value }}'
          {{- end }}
        env:
        - name: POSTGRES_USER
          value: {{ default "postgres" .Values.postgresUser | quote }}
          # Required for pg_isready in the health probes.
        - name: PGUSER
          value: {{ default "postgres" .Values.postgresUser | quote }}
        - name: POSTGRES_DB
          value: {{ default "" .Values.postgresDatabase | quote }}
        - name: POSTGRES_INITDB_ARGS
          value: {{ default "" .Values.postgresInitdbArgs | quote }}
        - name: PGDATA
          value: /var/lib/postgresql/data/pgdata
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: {{ template "postgresql.fullname" . }}
              key: postgres-password
        - name: POD_IP
          valueFrom: { fieldRef: { fieldPath: status.podIP } }
        - name: AWS_ACCESS_KEY_ID
          valueFrom:
            secretKeyRef:
              name: {{ template "postgresql.fullname" . }}-backup-creds
              key: s3_access_key_id
        - name: AWS_SECRET_ACCESS_KEY
          valueFrom:
            secretKeyRef:
              name: {{ template "postgresql.fullname" . }}-backup-creds
              key: s3_secret_access_key
        - name: WALE_S3_PREFIX
          valueFrom:
            configMapKeyRef:
              name: {{ template "postgresql.fullname" . }}-backup-config
              key: s3_bucket
        {{- if .Values.kanister.s3_endpoint }}
        - name: WALE_S3_ENDPOINT
          valueFrom:
            configMapKeyRef:
              name: {{ template "postgresql.fullname" . }}-backup-config
              key: s3_endpoint
        {{- else }}
        - name: AWS_REGION
          value: {{ default "us-east-1" .Values.kanister.s3_region | quote }}
        {{- end }}
        ports:
        - name: postgresql
          containerPort: 5432
        livenessProbe:
          exec:
            command:
            - sh
            - -c
            - exec pg_isready --host $POD_IP
          initialDelaySeconds: 120
          timeoutSeconds: 5
          failureThreshold: 6
        readinessProbe:
          exec:
            command:
            - sh
            - -c
            - exec pg_isready --host $POD_IP
          initialDelaySeconds: 5
          timeoutSeconds: 3
          periodSeconds: 5
        resources:
{{ toYaml .Values.resources | indent 10 }}
        volumeMounts:
        - name: data
          mountPath: {{ .Values.persistence.mountPath }}
          subPath: {{ .Values.persistence.subPath }}
{{- if .Values.metrics.enabled }}
      - name: metrics
        image: "{{ .Values.metrics.image }}:{{ .Values.metrics.imageTag }}"
        imagePullPolicy: {{ default "" .Values.metrics.imagePullPolicy | quote }}
        env:
        - name: DATA_SOURCE_NAME
          value: postgresql://postgres@127.0.0.1:5432?sslmode=disable
        ports:
        - name: metrics
          containerPort: 9187
        {{- if .Values.metrics.customMetrics }}
        args: ["-extend.query-path", "/conf/custom-metrics.yaml"]
        volumeMounts:
          - name: custom-metrics
            mountPath: /conf
            readOnly: true
        {{- end }}
        resources:
{{ toYaml .Values.metrics.resources | indent 10 }}
{{- end }}
      volumes:
      - name: data
      {{- if .Values.persistence.enabled }}
        persistentVolumeClaim:
          claimName: {{ .Values.persistence.existingClaim | default (include "postgresql.fullname" .) }}
      {{- else }}
        emptyDir: {}
      {{- end }}
      {{- if and .Values.metrics.enabled .Values.metrics.customMetrics }}
      - name: custom-metrics
        secret:
          secretName: {{ template "postgresql.fullname" . }}
          items:
            - key: custom-metrics.yaml
              path: custom-metrics.yaml
      {{- end }}
      {{- if .Values.imagePullSecrets }}
      imagePullSecrets:
        - name: {{ .Values.imagePullSecrets }}
      {{- end }}
