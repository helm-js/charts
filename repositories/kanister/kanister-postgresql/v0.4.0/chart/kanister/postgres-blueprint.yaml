actions:
  backup:
    type: Deployment
    phases:
    - func: KubeExec
      name: baseBackup
      args:
        - "{{ .Deployment.Namespace }}"
        - "{{ index .Deployment.Pods 0 }}"
        - postgresql
        - bash
        - -o
        - errexit
        - -o
        - pipefail
        - -c
        - |
          # TODO: An Artifact should be created to reference this backup-base.
          wal-e backup-push "${PGDATA}"
  restore:
    type: Deployment
    phases:
    - func: KubeExec
      name: fetchBase
      args:
        - "{{ .Deployment.Namespace }}"
        - "{{ index .Deployment.Pods 0 }}"
        - postgresql
        - bash
        - -o
        - errexit
        - -o
        - pipefail
        - -c
        - |
          recover_dir="${PGDATA}/kanister-restore"
          # TODO: Accept restore parameters to select a PIT and base-backup.
          # For example, use a KeyValue Artifact and configure restore.conf.
          # {
          #   "base": "base_000000010000000000000004_00000040",
          #   "type": "recovery_target_name",
          #   "value": "myCheckpoint",
          #   "s3_prefix": "s3://abucket/apath",
          # }
          wal-e backup-fetch "${recover_dir}" LATEST
          cat << EOF > "${recover_dir}"/recovery.conf
          restore_command = 'wal-e wal-fetch "%f" "%p"'
          recovery_target_action = 'shutdown'
          EOF
    - func: KubeTask
      name: restartPod
      args:
        - "{{ .Deployment.Namespace }}"
        - lachlanevenson/k8s-kubectl:v1.8.10
        - sh
        - -o
        - errexit
        - -o
        - pipefail
        - -c
        - |
          kubectl delete --namespace "{{ .Deployment.Namespace }}" pod "{{ index .Deployment.Pods 0 }}"
